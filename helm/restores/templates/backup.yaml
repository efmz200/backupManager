#Mongo
{{- if .Values.mongo.enabled}}
apiVersion: v1
kind: ConfigMap
metadata:
  name: mongo-restores-script
  namespace: {{ .Values.namespace }}
data:
{{ (.Files.Glob "scripts/mongodb.sh").AsConfig | indent 2 }}
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mongo-snapshotter
  namespace: {{ .Values.mongo.config.namespace }}
spec:
  storageClassName: {{ .Values.mongo.config.storageClass }}
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: {{ .Values.mongo.config.diskSize }}
---
 
apiVersion: batch/v1
kind: Job
metadata:
  name: mongo-restore-0
  namespace: {{ .Values.mongo.config.namespace }}
spec:
  template:
    spec:
      serviceAccountName: {{ .Values.mongo.config.serviceAccount }}
      volumes:
      - name: scripts
        configMap:
          name: mongo-restores-script
          defaultMode: 0777
      - name: mongo-snapshotter
        persistentVolumeClaim:
          claimName: mongo-snapshotter
      containers:
        - image: mcr.microsoft.com/azure-cli
          name: mongo-snapshotter
          env:
            - name: MONGO_CONNECTION_STRING
              value: "{{ .Values.mongo.config.connectionString }}"
            - name: AZURE_STORAGE_ACCOUNT
              value: "{{ .Values.mongo.config.storageAccount }}"
            - name: CONTAINER
              value: "{{ .Values.azure.container }}"
            - name: restore_PATH
              value: "{{ .Values.mongo.config.path }}"
            - name: MAX_restoreS
              value: "{{ .Values.mongo.config.maxrestores }}"
            - name: MONGO_USERNAME
              value: "root"
            - name: DATE
              value: "{{ .Values.restore.date }}"
            - name: MONGO_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: "{{ .Values.mongo.config.secret }}"
                  key: mongodb-root-password
                  optional: false
            - name: AZURE_STORAGE_KEY
              valueFrom:
                secretKeyRef:
                  name: "{{.Values.azure.azureSecret }}"
                  key: azure.client.default.key
                  optional: false
          volumeMounts:
            - mountPath: "/mongodump"
              name: mongo-snapshotter
            - name: scripts
              mountPath: /scripts
          command:
            - "/scripts/mongodb.sh"
            # - "tail"
            # - "-f"
            # - "/dev/null"
      restartPolicy: Never
  backoffLimit: 1
{{- end}}

###################
#Maria ############
###################

{{- if .Values.mariadb.enabled }}

apiVersion: v1
kind: ConfigMap
metadata:
  name: maria-restores-script
  namespace: {{ .Values.namespace }}
data:
{{ (.Files.Glob "scripts/mariadb.sh").AsConfig | indent 2 }}
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: maria-snapshotter
  namespace: {{ .Values.mariadb.config.namespace }}
spec:
  storageClassName: {{ .Values.mariadb.config.storageClass }}
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: {{ .Values.mariadb.config.diskSize }}
---
 
apiVersion: batch/v1
kind: Job
metadata:
  name: maria-restore-0
  namespace: {{ .Values.mariadb.config.namespace }}
spec:
  template:
    spec:
      serviceAccountName: {{ .Values.mariadb.config.serviceAccount }}
      volumes:
      - name: scripts
        configMap:
          name: maria-restores-script
          defaultMode: 0777
      - name: maria-snapshotter
        persistentVolumeClaim:
          claimName: maria-snapshotter
      containers:
        - image: mcr.microsoft.com/azure-cli
          name: maria-snapshotter
          env:
            - name: AZURE_STORAGE_ACCOUNT
              value: "{{ .Values.azure.storageAccount }}"
            - name: MARIADB_HOST
              value: "{{ .Values.mariadb.config.host }}"
            - name: MARIADB_SOCKET
              value: "{{ .Values.mariadb.config.socket }}"
            - name: CONTAINER
              value: "{{ .Values.azure.container }}"
            - name: restore_PATH
              value: "{{ .Values.mariadb.config.path }}"
            - name: MAX_restoreS
              value: "{{ .Values.mariadb.config.maxrestores }}"
            - name: MARIA_USERNAME
              value: "{{ .Values.mariadb.config.mariadbUser }}"
            - name: MARIA_PORT
              value: "{{ .Values.mariadb.config.port }}"
            - name: DATE
              value: "{{ .Values.restore.date }}"
            - name: MARIADB_DB
              value: "{{ .Values.mariadb.config.databaseName }}"
            - name: MARIA_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: "{{ .Values.mariadb.config.secret }}"
                  key: mariadb-root-password
                  optional: false
            - name: AZURE_STORAGE_KEY
              valueFrom:
                secretKeyRef:
                  name: "{{ .Values.azure.azureSecret }}"
                  key: azure.client.default.key
                  optional: false           
          volumeMounts:
            - mountPath: "/mariadump"
              name: maria-snapshotter
            - name: scripts
              mountPath: /scripts
          command:
            - "/scripts/mariadb.sh"
            # - "tail"
            # - "-f"
            # - "/dev/null"
      restartPolicy: Never
  backoffLimit: 1

{{- end }}

###################
#Postgres #########
###################

{{- if .Values.postgresql.enabled }}

apiVersion: v1
kind: ConfigMap
metadata:
  name: postgre-restores-script
  namespace: {{ .Values.namespace }}
data:
{{ (.Files.Glob "scripts/postgresql.sh").AsConfig | indent 2 }}
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgre-snapshotter
  namespace: {{ .Values.postgresql.config.namespace }}
spec:
  storageClassName: {{ .Values.postgresql.config.storageClass }}
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: {{ .Values.postgresql.config.diskSize }}
---
apiVersion: batch/v1
kind: Job
metadata:
  name: postgre-restore-0
  namespace: {{ .Values.postgresql.config.namespace }}
spec:
  template:
    spec:
      serviceAccountName: {{ .Values.postgresql.config.serviceAccount }}
      volumes:
      - name: scripts
        configMap:
          name: postgre-restores-script
          defaultMode: 0777
      - name: postgre-snapshotter
        persistentVolumeClaim:
          claimName: postgre-snapshotter
      containers:
        - image: mcr.microsoft.com/azure-cli
          name: postgre-snapshotter
          env:
            - name: POSTGRES_CONNECTION_STRING
              value: "{{ .Values.postgresql.config.connectionString }}"
            - name: AZURE_STORAGE_ACCOUNT
              value: "{{ .Values.azure.storageAccount }}"
            - name: CONTAINER
              value: "{{ .Values.azure.container }}"
            - name: restore_PATH
              value: "{{ .Values.postgresql.config.path }}"
            - name: MAX_restoreS
              value: "{{ .Values.postgresql.config.maxrestores }}"
            - name: POSTGRES_USERNAME
              value: "root"
            - name: POSTGRES_HOST
              value: "{{ .Values.postgresql.config.host }}"
            - name: POSTGRES_PORT
              value: "{{ .Values.postgresql.config.port }}"
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: "{{ .Values.postgresql.config.secret }}"
                  key: postgres-password
                  optional: false
            - name: AZURE_STORAGE_KEY
              valueFrom:
                secretKeyRef:
                  name: "{{ .Values.azure.azureSecret }}"
                  key: azure.client.default.key
                  optional: false
          volumeMounts:
            - mountPath: "/postgredump"
              name: postgre-snapshotter
            - name: scripts
              mountPath: /scripts
          command:
            - "/scripts/postgresql.sh"
            # - "tail"
            # - "-f"
            # - "/dev/null"
      restartPolicy: Never
  backoffLimit: 1

{{- end }}

###################
#neo4j ############
###################

{{- if .Values.neo4j.enabled }}

apiVersion: v1
kind: ConfigMap
metadata:
  name: neo4j-restores-script
  namespace: {{ .Values.namespace }}
data:
{{ (.Files.Glob "scripts/neo4j.sh").AsConfig | indent 2 }}
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: neo4j-snapshotter
  namespace: {{ .Values.neo4j.config.namespace }}
spec:
  storageClassName: {{ .Values.neo4j.config.storageClass }}
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: {{ .Values.neo4j.config.diskSize }}
---

apiVersion: batch/v1
kind: Job
metadata:
  name: neo4j-restore-0
  namespace: {{ .Values.neo4j.config.namespace }}
spec:
  template:
    spec:
      serviceAccountName: {{ .Values.neo4j.config.serviceAccount }}
      volumes:
      - name: scripts
        configMap:
          name: neo4j-restores-script
          defaultMode: 0777
      - name: neo4j-snapshotter
        persistentVolumeClaim:
          claimName: neo4j-snapshotter
      containers:
        - image: mcr.microsoft.com/azure-cli
          name: neo4j-snapshotter
          env:
            - name: NEO4J_CONNECTION_STRING
              value: "{{ .Values.neo4j.config.connectionString }}"
            - name: AZURE_STORAGE_ACCOUNT
              value: "{{ .Values.azure.storageAccount }}"
            - name: CONTAINER
              value: "{{ .Values.azure.container}}"
            - name: restore_PATH
              value: "{{ .Values.neo4j.config.path }}"
            - name: MAX_restoreS
              value: "{{ .Values.neo4j.config.maxrestores }}"
            - name: NEO4J_USERNAME
              value: "neo4j"
            - name: NEO4J_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: "{{ .Values.neo4j.config.secret }}"
                  key: NEO4J_AUTH
                  optional: false
            - name: AZURE_STORAGE_KEY
              valueFrom:
                secretKeyRef:
                  name: "{{ .Values.azure.azureSecret }}"
                  key: azure.client.default.key
                  optional: false
          volumeMounts:
            - mountPath: "/neo4jdump"
              name: neo4j-snapshotter
            - name: scripts
              mountPath: /scripts
          command:
            - "/scripts/neo4j.sh"
            # - "tail"
            # - "-f"
            # - "/dev/null"
      restartPolicy: Never
  backoffLimit: 1

{{- end }}

###################
#couchdb ##########
###################

{{- if .Values.couchdb.enabled }}

apiVersion: v1
kind: ConfigMap
metadata:
  name: couch-restores-script
  namespace: {{ .Values.namespace }}
data:
{{ (.Files.Glob "scripts/couchdb.sh").AsConfig | indent 2 }}
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: couch-snapshotter
  namespace: {{ .Values.couchdb.config.namespace }}
spec:
  storageClassName: {{ .Values.couchdb.config.storageClass }}
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: {{ .Values.couchdb.config.diskSize }}
---
 
apiVersion: batch/v1
kind: Job
metadata:
  name: couch-restore-0
  namespace: {{ .Values.couchdb.config.namespace }}
spec:
  template:
    spec:
      serviceAccountName: {{ .Values.couchdb.config.serviceAccount }}
      volumes:
      - name: scripts
        configMap:
          name: couch-restores-script
          defaultMode: 0777
      - name: couch-snapshotter
        persistentVolumeClaim:
          claimName: couch-snapshotter
      containers:
        - image: mcr.microsoft.com/azure-cli
          name: couch-snapshotter
          env:
            - name: COUCH_CONNECTION_STRING
              value: "{{ .Values.couchdb.config.connectionString }}"
            - name: AZURE_STORAGE_ACCOUNT
              value: "{{ .Values.azure.storageAccount }}"
            - name: CONTAINER
              value: "{{ .Values.azure.container }}"
            - name: restore_PATH
              value: "{{ .Values.couchdb.config.path }}"
            - name: MAX_restoreS
              value: "{{ .Values.couchdb.config.maxrestores }}"
            - name: COUCH_USERNAME
              value: "root"
            - name: COUCH_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: "{{ .Values.couchdb.config.secret }}"
                  key: adminPassword
                  optional: false
            - name: AZURE_STORAGE_KEY
              valueFrom:
                secretKeyRef:
                  name: "{{ .Values.azure.azureSecret }}"
                  key: azure.client.default.key
                  optional: false
          volumeMounts:
            - mountPath: "/couchdump"
              name: couch-snapshotter
            - name: scripts
              mountPath: /scripts
          command:
            - "/scripts/couchdb.sh"
            # - "tail"
            # - "-f"
            # - "/dev/null"
      restartPolicy: Never
  backoffLimit: 1

{{- end }}